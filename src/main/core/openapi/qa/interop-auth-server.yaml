openapi: 3.0.3
info:
  title: Interoperability Authorization Server Micro Service
  description: Provides endpoints to request an interoperability token
  version: 0.1.0
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
  termsOfService: http://swagger.io/terms/
  x-api-id: an x-api-id
  x-summary: an x-summary
servers:
- url: /authorization-server
  description: Interoperability Authorization Server
tags:
- name: auth
  description: Get security information
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: health
  description: Verify service status
  externalDocs:
    description: Find out more
    url: http://swagger.io
paths:
  /token.oauth2:
    post:
      tags:
      - auth
      summary: Create a new access token
      description: Return the generated access token
      operationId: createToken
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AccessTokenRequest'
      responses:
        '200':
          description: The Access token
          headers:
            Cache-Control:
              schema:
                type: string
                default: no-cache, no-store
              description: no-cache, no-store
            X-Rate-Limit-Limit:
              schema:
                type: integer
              description: Max allowed requests within time interval
            X-Rate-Limit-Remaining:
              schema:
                type: integer
              description: Remaining requests within time interval
            X-Rate-Limit-Interval:
              schema:
                type: integer
              description: Time interval in milliseconds. Allowed requests will be
                constantly replenished during the interval. At the end of the interval
                the max allowed requests will be available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCredentialsResponse'
        '400':
          description: Bad request
          x-noqa: RFC6749
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          x-noqa: RFC6749
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            X-Rate-Limit-Limit:
              schema:
                type: integer
              description: Max allowed requests within time interval
            X-Rate-Limit-Remaining:
              schema:
                type: integer
              description: Remaining requests within time interval
            X-Rate-Limit-Interval:
              schema:
                type: integer
              description: Time interval in milliseconds. Allowed requests will be
                constantly replenished during the interval. At the end of the interval
                the max allowed requests will be available
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: ANY
        passthroughBehavior: when_no_match
        connectionId: ${stageVariables.VpcLinkId}
        connectionType: VPC_LINK
        uri: http://${stageVariables.NLBDomain}/${stageVariables.ServicePrefix}/token.oauth2
  /status:
    get:
      security: []
      summary: Returns the application status
      description: Returns the application status
      operationId: get_status
      tags:
      - health
      responses:
        '200':
          description: This is the valid status from the server.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: ANY
        passthroughBehavior: when_no_match
        connectionId: ${stageVariables.VpcLinkId}
        connectionType: VPC_LINK
        uri: http://${stageVariables.NLBDomain}/${stageVariables.ServicePrefix}/status
components:
  schemas:
    AccessTokenRequest:
      type: object
      required:
      - client_assertion
      - client_assertion_type
      - grant_type
      properties:
        client_id:
          type: string
          example: e58035ce-c753-4f72-b613-46f8a17b71cc
        client_assertion:
          type: string
          format: jws
        client_assertion_type:
          type: string
          example: urn:ietf:params:oauth:client-assertion-type:jwt-bearer
        grant_type:
          type: string
          enum:
          - client_credentials
    TokenType:
      type: string
      description: Represents the token type
      enum:
      - Bearer
    ClientCredentialsResponse:
      type: object
      required:
      - access_token
      - token_type
      - expires_in
      properties:
        access_token:
          type: string
          format: jws
        token_type:
          $ref: '#/components/schemas/TokenType'
        expires_in:
          type: integer
          format: int32
          maximum: 600
    Problem:
      properties:
        type:
          description: URI reference of type definition
          type: string
        status:
          description: The HTTP status code generated by the origin server for this
            occurrence of the problem.
          example: 400
          exclusiveMaximum: true
          format: int32
          maximum: 600
          minimum: 100
          type: integer
        title:
          description: A short, summary of the problem type. Written in english and
            readable
          example: Service Unavailable
          maxLength: 64
          pattern: ^[ -~]{0,64}$
          type: string
        detail:
          description: A human readable explanation of the problem.
          example: Request took too long to complete.
          maxLength: 4096
          pattern: ^.{0,1024}$
          type: string
        errors:
          type: array
          minItems: 0
          items:
            $ref: '#/components/schemas/ProblemError'
      additionalProperties: false
      required:
      - type
      - status
      - title
      - errors
    ProblemError:
      properties:
        code:
          description: Internal code of the error
          example: 123-4567
          minLength: 8
          maxLength: 8
          pattern: ^[0-9]{3}-[0-9]{4}$
          type: string
        detail:
          description: A human readable explanation specific to this occurrence of
            the problem.
          example: Parameter not valid
          maxLength: 4096
          pattern: ^.{0,1024}$
          type: string
      required:
      - code
      - detail
